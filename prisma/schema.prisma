generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  displayName  String
  email        String?   @unique
  passwordHash String?
  googleId     String?
  avatarUrl    String?
  role         Role      @default(USER)
  sessions     Session[]
  createdAt    DateTime? @default(now())
  carts        Cart[]
  orders       Order[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id          String    @id @default(uuid())
  image_url   String
  name        String
  description String?   @db.VarChar(500)
  price       Decimal
  sale_price  Decimal?
  stock       Int       @default(0)
  category_id String
  category    Category  @relation(fields: [category_id], references: [id])
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @updatedAt

  cart_items CartItem[]
  order_items OrderItem[]

  @@map("products")
}

model Category {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt

  products Product[]

  @@map("categories")
}

model CartItem {
  id         String   @id @default(uuid())
  cart_id    String
  product_id String
  quantity   Int      @default(1)
  added_at   DateTime @default(now()) @db.Timestamp(0)
  carts      Cart     @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  products   Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([cart_id, product_id], map: "cart_id")
  @@index([product_id], map: "product_id")
  @@map("cart_items")
}

model Cart {
  id         String     @id @default(uuid())
  user_id    String
  created_at DateTime?  @default(now()) @db.Timestamp(0)
  updated_at DateTime?  @updatedAt
  cart_items CartItem[]
  users      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "user_id")
  @@map("carts")
}

model Order {
  id          String      @id @default(uuid())
  user_id     String
  totalPrice  Decimal
  status      OrderStatus @default(PENDING)
  created_at  DateTime    @default(now()) @db.Timestamp(0)
  updated_at  DateTime?   @updatedAt
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order_items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid())
  order_id   String
  product_id String
  quantity   Int      @default(1)
  unitPrice  Decimal
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@unique([order_id, product_id], map: "order_id")
  @@index([product_id], map: "product_id")
  @@map("order_items")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum Role {
  USER
  ADMIN
}
