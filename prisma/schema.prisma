generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AdminSettings {
  id                 String  @id @default(uuid())
  lowStockAlertLevel Int     @default(20)
  warningStockLevel  Int     @default(50)
  taxRate            Decimal @default(0.0)

  @@map("admin_settings")
}

model User {
  id           String           @id @default(uuid())
  email        String?          @unique
  username     String?
  passwordHash String?
  googleId     String?
  avatarUrl    String?
  createdAt    DateTime?        @default(now())
  role         Role             @default(USER)
  sessions     Session[]
  carts        Cart[]
  orders       Order[]
  address      DeliveryAddress?

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model DeliveryAddress {
  id          String @id @default(uuid())
  userId      String @unique @map("user_id")
  name        String
  street      String
  city        String
  postalCode  String @map("postal_code")
  country     String
  phoneNumber String @map("phone_number")

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order[]

  @@map("delivery_addresses")
}

model Product {
  id          String    @id @default(uuid())
  imageUrl    String    @map("image_url")
  name        String
  description String?   @db.VarChar(500)
  price       Decimal
  salePrice   Decimal?  @map("sale_price")
  stock       Int       @default(0)
  categoryId  String    @map("category_id")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime? @updatedAt @map("updated_at")

  category    Category    @relation(fields: [categoryId], references: [id])
  cart_items  CartItem[]
  order_items OrderItem[]

  @@map("products")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @updatedAt @map("updated_at")

  products Product[]

  @@map("categories")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String   @map("cart_id")
  productId String   @map("product_id")
  quantity  Int      @default(1)
  added_at  DateTime @default(now()) @db.Timestamp(0)
  carts     Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  products  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId], map: "cart_id")
  @@index([productId], map: "product_id")
  @@map("cart_items")
}

model Cart {
  id         String     @id @default(uuid())
  userId     String     @map("user_id")
  createdAt  DateTime?  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime?  @updatedAt @map("updated_at")
  cart_items CartItem[]
  users      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "user_id")
  @@map("carts")
}

model Order {
  id         String           @id @default(uuid())
  userId     String           @map("user_id")
  addressId  String?          @map("address_id")
  totalPrice Decimal          @map("total_price")
  status     OrderStatus      @default(PENDING)
  createdAt  DateTime         @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime?        @updatedAt @map("updated_at")
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  address    DeliveryAddress? @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  quantity  Int     @default(1)
  unitPrice Decimal
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId], map: "order_id")
  @@index([productId], map: "product_id")
  @@map("order_items")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum Role {
  USER
  ADMIN
}
